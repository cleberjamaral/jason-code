/*
   Project jason_code

   Gradle build file for Jason Application
   July 27, 2020 - 21:42:32
*/

defaultTasks 'run'

apply plugin: 'java'
apply plugin: 'eclipse'

version '1.0'
group   'org.jason'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()

    maven { url "https://raw.github.com/jacamo-lang/mvn-repo/master" }

    flatDir {
       dirs 'lib'
    }
}

dependencies {
    implementation 'org.jason:jason:2.6-SNAPSHOT'
}

sourceSets {
    main {
        java {
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

task run (type: JavaExec, dependsOn: 'classes') {
    description 'runs the application'
    main = 'jason.infra.centralised.RunCentralisedMAS'
    args 'jason_code.mas2j'
    classpath sourceSets.main.runtimeClasspath
}

task testJason {
    description 'runs Jason unit tests: tests.mas2j'
    def errorOnTests = false
    outputs.upToDateWhen { false } // disable cache

    doFirst {
        try {
            javaexec {
                main = 'jason.infra.centralised.RunCentralisedMAS'
                if (gradle.startParameter.logLevel.toString().equals("DEBUG")) {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/test/jason/console-debug-logging.properties']
                } else if (gradle.startParameter.logLevel.toString().equals("INFO")) {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/test/jason/console-info-logging.properties']
                } else {
                    args = ['src/test/jason/unit_tests.mas2j', '--log-conf', 'src/test/jason/console-lifecycle-logging.properties']
                }
                classpath sourceSets.main.runtimeClasspath
                sourceSets.test.java.srcDirs += ['src/test/jason/jia']

                errorOutput = new ByteArrayOutputStream()
                standardOutput = new ByteArrayOutputStream()

                ext.stdout = {
                    return standardOutput.toString()
                }
                ext.errout = {
                    return errorOutput.toString()
                }
            }
        } catch (Exception e) {
            errorOnTests = true
        }
    }

    doLast {
        def styler = 'black red green yellow blue magenta cyan white'
            .split().toList().withIndex(30)
            .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }

        def std = stdout()
        std.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        def err = errout()
        err.splitEachLine('\n') { String line ->
            line = line.replace("TESTING","${styler['yellow']('TESTING')}")
            line = line.replace("PASSED","${styler['green']('PASSED')}")
            line = line.replace("FAILED","${styler['red']('FAILED')}")
            line = line.replace("TODO","${styler['magenta']('TODO')}")
            line = line.replace("LAUNCHING","${styler['blue']('LAUNCHING')}")
            println line
        }

        if (errorOnTests) {
            throw new GradleException('Jason unit tests: ERROR!')
        }
    }
}
tasks.test.finalizedBy testJason

clean {
    delete 'bin'
    delete 'build'
}
